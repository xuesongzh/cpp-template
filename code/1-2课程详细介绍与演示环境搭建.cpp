// MyProject.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>

void func()
{
	int i = 10;
	int j = 9;
	std::cout << "Hello World1!\n";
	std::cout << "Hello World2!\n";
}
int main()
{
	//一：课程详细介绍
	//（1.1）C++支持的程序设计方法介绍
		//a:面向过程的编程。b：面向对象的编程。c:模板与泛型编程（泛型编程），元编程（可以归属到泛型编程）。
		//泛型编程：Generic Programming（GP）。C++标准库，Boost库都是用GP实现的商业作品
		//有人也把泛型编程看成是由模板技术衍生出来，这都没问题。
		//泛型编程的概念：以独立于任何特定类型的方式编写代码。(课复用性增加，冗余减少)
		//泛型编程用到的技术：模板技术是泛型编程的基础（核心和本质），或者说泛型编程就是运用模板进行编程。
	//（1.2）本课程的讲解初衷与学习方法
		//讲解初衷是帮助大家解决各种模板与泛型编程中的语法问题，以免大家在阅读他人所写泛型编程代码时磕磕绊绊，甚至进行不下去。
		//对商业价值源码进行适当的分析和讲解，以进一步提高大家的实战能力。
		//C++11/14/17新标准方面的泛型编程知识。
	//（1.3）需要的基础知识
		//建议有1-2年C++编程经验，STL应该有一定的使用能力，对C++11/14/17新标准有一定的了解。
		//也希望大家对C++基础模板知识有一定掌握，哪怕知道最基本的函数模板，类模板长什么样。
		//《C++从入门到精通 c++98/11/14/17》——超出想象的好

	//二：演示环境介绍和准备
	//（2.1）演示环境搭建说明
		//Windows操作系统平台，至少是Visual Studio 2017，最好Visual Studio 2019。原则上来讲VS的版本越新越好。
			//安装过程阐述（在线安装，需要网络支持）
			//网址：https://visualstudio.microsoft.com/zh-hans/
			//更新若需要账号，就注册一个。

	//（2.2）创建最基本的能运行的C++程序
		//搜索：Visual Stuido 2019 创建新C++项目
		//Ctrl + F5 ，编译、链接、运行
	
	//（2.3）Visual Studio中程序的调试方法
	//(2.3.1)普通的断点调试（跟踪调试）
		//F9（调试->切换断点）：用来给光标所在行增加断点或者取消有断点行的断点
		//F5（调试->开始调试）：用来开始执行程序，遇到第一个断点行就停下来。
		//F10（调试->逐过程）：一行一行执行下去。
		//F11（调试->逐语句）：跳入到函数中继续跟踪。
		//shift + f11（调试->跳出）：跳出当前函数，跳回到调用处并继续往下跟踪调试
		
	//(2.3.2)学会调试时查看内存中的内容
	//(2.3.3)快速监视窗口,调试时按下Shift+F9（调试->快速监视）：
	//(2.3.4)查看反汇编窗口,调试时选择菜单（调试->窗口->反汇编）：


	//（2.4）开启Visual Studio 2019对C++最新标准的编译支持

	   

   /* std::cout << "Hello World!\n";
	func();
	printf("很高兴我们大家一起学习!\n");
	printf("35+48的值是%d",35+48);*/

	char aaa[1000] = "safasdfa\0def";
	printf(aaa);
	
	


}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
